// Error viewing datums, responsible for storing error info, notifying admins
// when errors occur, and showing them to admins on demand.

// There are 3 different types used here:
//
// - error_cache keeps track of all error sources, as well as all individually
//   logged errors. Only one instance of this datum should ever exist, and it's
//   right here:

#ifdef DEBUG
GLOBAL_DATUM_INIT(error_cache, /datum/error_viewer/error_cache, new)
#else
// If debugging is disabled, there's nothing useful to log, so don't bother.
GLOBAL_DATUM(error_cache, /datum/error_viewer/error_cache)
#endif

// - error_source datums exist for each line (of code) that generates an error,
//   and keep track of all errors generated by that line.
//
// - error_entry datums exist for each logged error, and keep track of all
//   relevant info about that error.

// Common vars and procs are kept at the error_viewer level
/datum/error_viewer
	var/name = ""

/datum/error_viewer/proc/browse_to(client/user, html)
	var/datum/browser/browser = new(user.mob, "error_viewer", null, 600, 400)
	browser.set_content(html)
	browser.add_head_content({"
	<style>
	.runtime
	{
		background-color: #171717;
		border: solid 1px #202020;
		font-family: "Courier New";
		padding-left: 10px;
		color: #CCCCCC;
	}
	.runtime_line
	{
		margin-bottom: 10px;
		display: inline-block;
	}
	</style>
	"})
	browser.open()

/datum/error_viewer/proc/build_header(datum/error_viewer/back_to, linear)
	// Common starter HTML for show_to

	. = ""

	if (istype(back_to))
		. += back_to.make_link("<b>&lt;&lt;&lt;</b>", null, linear)

	. += "[make_link("Refresh")]<br><br>"

/datum/error_viewer/proc/show_to(user, datum/error_viewer/back_to, linear)
	// Specific to each child type
	return

/datum/error_viewer/proc/make_link(linktext, datum/error_viewer/back_to, linear)
	var/back_to_param = ""
	if (!linktext)
		linktext = name

	if (istype(back_to))
		back_to_param = ";viewruntime_backto=\ref[back_to]"

	if (linear)
		back_to_param += ";viewruntime_linear=1"
	return "<A HREF='?src=\ref[src];viewruntime=\ref[src][back_to_param]'>[rhtml_encode(linktext)]</A>"

/datum/error_viewer/error_cache
	var/list/errors = list()
	var/list/error_sources = list()
	var/list/errors_silenced = list()

/datum/error_viewer/error_cache/show_to(user, datum/error_viewer/back_to, linear)
	var/html = build_header()
	html += "<b>[GLOB.total_runtimes]</b> runtimes, <b>[GLOB.total_runtimes_skipped]</b> skipped<br><br>"
	if (!linear)
		html += "organized | [make_link("linear", null, 1)]<hr>"
		var/datum/error_viewer/error_source/error_source
		for (var/erroruid in error_sources)
			error_source = error_sources[erroruid]
			html += "[error_source.make_link(null, src)]<br>"

	else
		html += "[make_link("organized", null)] | linear<hr>"
		for (var/datum/error_viewer/error_entry/error_entry in errors)
			html += "[error_entry.make_link(null, src, 1)]<br>"

	browse_to(user, html)

/datum/error_viewer/error_cache/proc/log_error(exception/e, list/desclines, skip_count)
	if (!istype(e))
		return // Abnormal exception, don't even bother

	var/erroruid = "[e.file][e.line]"
	var/datum/error_viewer/error_source/error_source = error_sources[erroruid]
	if (!error_source)
		error_source = new(e)
		error_sources[erroruid] = error_source

	var/datum/error_viewer/error_entry/error_entry = new(e, desclines, skip_count)
	error_entry.error_source = error_source
	errors += error_entry
	error_source.errors += error_entry
	if (skip_count)
		return // Skip notifying admins about skipped errors.

	// Show the error to admins with debug messages turned on, but only if one
	//  from the same source hasn't been shown too recently
	if (error_source.next_message_at <= world.time)
		var/const/viewtext = "\[view]" // Nesting these in other brackets went poorly
		//log_debug("Runtime in <b>[e.file]</b>, line <b>[e.line]</b>: <b>[html_encode(e.name)]</b> [error_entry.make_link(viewtext)]")
		var/err_msg_delay
		if(config)
			err_msg_delay = config.error_msg_delay
		else
			err_msg_delay = initial(config.error_msg_delay)
		error_source.next_message_at = world.time + err_msg_delay

/datum/error_viewer/error_source
	var/list/errors = list()
	var/next_message_at = 0

/datum/error_viewer/error_source/New(exception/e)
	if (!istype(e))
		name = "\[[time_stamp()]] Uncaught exceptions"
		return

	name = "<b>\[[time_stamp()]]</b> Runtime in <b>[e.file]</b>, line <b>[e.line]</b>: <b>[html_encode(e.name)]</b>"

/datum/error_viewer/error_source/show_to(user, datum/error_viewer/back_to, linear)
	if (!istype(back_to))
		back_to = GLOB.error_cache

	var/html = build_header(back_to)
	for (var/datum/error_viewer/error_entry/error_entry in errors)
		html += "[error_entry.make_link(null, src)]<br>"

	browse_to(user, html)

/datum/error_viewer/error_entry
	var/datum/error_viewer/error_source/error_source
	var/exception/exc
	var/desc = ""
	var/usr_ref
	var/turf/usr_loc
	var/is_skip_count

/datum/error_viewer/error_entry/New(exception/e, list/desclines, skip_count)
	if (!istype(e))
		name = "<b>\[[time_stamp()]]</b> Uncaught exception: <b>[html_encode(e.name)]</b>"
		return

	if(skip_count)
		name = "\[[time_stamp()]] Skipped [skip_count] runtimes in [e.file],[e.line]."
		is_skip_count = TRUE
		return

	name = "<b>\[[time_stamp()]]</b> Runtime in <b>[e.file]</b>, line <b>[e.line]</b>: <b>[html_encode(e.name)]</b>"
	exc = e
	if (istype(desclines))
		for (var/line in desclines)
			// There's probably a better way to do this than non-breaking spaces...
			desc += "&nbsp;&nbsp;" + rhtml_encode(line) + "<br>"
			info += "\n  " + line
	if(istype(e_src))
		srcRef = "\ref[e_src]"
		srcType = e_src.type
		srcLoc = get_turf(e_src)
	if(usr)
		usrRef = "\ref[usr]"
		usrLoc = get_turf(usr)

/datum/ErrorViewer/ErrorEntry/showTo(var/user, var/datum/ErrorViewer/back_to, var/linear)
	if(!istype(back_to))
		back_to = error_source
	var/html = buildHeader(back_to, linear)
	html += "<div class='runtime'>[rhtml_encode(name)]<br>[desc]</div>"
	if(srcRef)
		html += "<br>src: <a href='?_src_=vars;Vars=[srcRef]'>VV</a>"
		if(ispath(srcType, /mob))
			html += " <a href='?_src_=holder;adminplayeropts=[srcRef]'>PP</a>"
			html += " <a href='?_src_=holder;adminplayerobservefollow=[srcRef]'>Follow</a>"
		if(istype(srcLoc))
			html += "<br>src.loc: <a href='?_src_=vars;Vars=\ref[srcLoc]'>VV</a>"
			html += " <a href='?_src_=holder;adminplayerobservecoodjump=1;X=[srcLoc.x];Y=[srcLoc.y];Z=[srcLoc.z]'>JMP</a>"
	if(usrRef)
		html += "<br>usr: <a href='?_src_=vars;Vars=[usrRef]'>VV</a>"
		html += " <a href='?_src_=holder;adminplayeropts=[usrRef]'>PP</a>"
		html += " <a href='?_src_=holder;adminplayerobservefollow=[usrRef]'>Follow</a>"
		if(istype(usrLoc))
			html += "<br>usr.loc: <a href='?_src_=vars;Vars=\ref[usrLoc]'>VV</a>"
			html += " <a href='?_src_=holder;adminplayerobservecoodjump=1;X=[usrLoc.x];Y=[usrLoc.y];Z=[usrLoc.z]'>JMP</a>"
	browseTo(user, html)

/datum/ErrorViewer/ErrorEntry/makeLink(var/linktext, var/datum/ErrorViewer/back_to, var/linear)
	if(isSkipCount)
		return rhtml_encode(name)
	else
		return ..()
